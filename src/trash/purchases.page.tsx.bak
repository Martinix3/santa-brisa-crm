"use client";

import * as React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator, DropdownMenuCheckboxItem } from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/hooks/use-toast";
import type { Expense, DocumentStatus, PaymentStatus } from "@/types";
import { useAuth } from "@/contexts/auth-context";
import { PlusCircle, MoreHorizontal, Filter, ChevronDown, Trash2, Receipt, Loader2, Sparkles, Edit, PowerOff } from "lucide-react";
import { PurchaseDialog } from "@/components/app/purchase-dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { format, parseISO } from "date-fns";
import { es } from 'date-fns/locale';
import StatusBadge from "@/components/app/status-badge";
import FormattedNumericValue from "@/components/lib/formatted-numeric-value";
import { getExpensesFS, deleteExpenseFS, deleteExpensesBatchFS } from "@/services/purchase-service";
import { useCategories } from "@/contexts/categories-context";
import { processInvoice } from '@/ai/flows/invoice-processing-flow';

const documentStatusList: DocumentStatus[] = ['proforma', 'factura_pendiente', 'factura_recibida', 'factura_validada'];
const paymentStatusList: PaymentStatus[] = ['pendiente', 'parcial', 'pagado', 'pagado_adelantado'];


export default function PurchasesPage() {
  const { toast } = useToast();
  const { userRole, teamMember, dataSignature, refreshDataSignature } = useAuth();
  const { categoriesMap, isLoading: isLoadingCategories } = useCategories();

  const [expenses, setExpenses] = React.useState<Expense[]>([]);
  const [isLoadingExpenses, setIsLoadingExpenses] = React.useState(true);
  
  const [isPurchaseDialogOpen, setIsPurchaseDialogOpen] = React.useState(false);
  const [expenseToEdit, setExpenseToEdit] = React.useState<Partial<Expense> | null>(null);
  const [isProcessingInvoice, setIsProcessingInvoice] = React.useState(false);

  const [expenseToDelete, setExpenseToDelete] = React.useState<Expense | null>(null);
  const [expensesToDelete, setExpensesToDelete] = React.useState<string[]>([]);
  
  const [searchTerm, setSearchTerm] = React.useState("");
  const [docStatusFilter, setDocStatusFilter] = React.useState<DocumentStatus | "Todos">("Todos");
  const [paymentStatusFilter, setPaymentStatusFilter] = React.useState<PaymentStatus | "Todos">("Todos");

  const [selectedExpenseIds, setSelectedExpenseIds] = React.useState<string[]>([]);
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  const isAdmin = userRole === 'Admin';
  const isLoading = isLoadingExpenses || isLoadingCategories;
  const isAiDisabled = true; // API is disabled
  
  React.useEffect(() => {
    async function loadInitialData() {
        setIsLoadingExpenses(true);
        try {
            const fetchedExpenses = await getExpensesFS();
            setExpenses(fetchedExpenses);
        } catch (error: any) {
            console.error("Failed to load expenses:", error);
            toast({ title: "Error", description: "No se pudieron cargar los gastos.", variant: "destructive" });
        } finally {
            setIsLoadingExpenses(false);
        }
    }
    if (isAdmin) {
        loadInitialData();
    } else {
        setIsLoadingExpenses(false);
    }
  }, [toast, isAdmin, dataSignature]);
  
  const handleAddNewExpenseManually = () => {
    if (!isAdmin) return;
    setExpenseToEdit(null);
    setIsPurchaseDialogOpen(true);
  };
  
  const handleEditExpense = (expense: Expense) => {
    if (!isAdmin) return;
    setExpenseToEdit(expense);
    setIsPurchaseDialogOpen(true);
  };

  const handleDeleteSelected = () => {
    if (!isAdmin || selectedExpenseIds.length === 0) return;
    setExpensesToDelete(selectedExpenseIds);
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (isAiDisabled) {
        toast({
            title: "Función Desactivada",
            description: "El procesamiento de facturas con IA está desactivado.",
            variant: "destructive"
        });
        return;
    }
    const file = event.target.files?.[0];
    if (!file) return;

    setIsProcessingInvoice(true);
    toast({ title: 'Procesando factura...', description: 'La IA está analizando el documento. Esto puede tardar unos segundos.' });

    try {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = async () => {
            const dataUri = reader.result as string;
            const result = await processInvoice({ invoiceDataUri: dataUri });
            
            const prefilledData: Partial<Expense> = {
                proveedorNombre: result.supplierName,
                invoiceNumber: result.invoiceId,
                monto: result.total,
                items: result.items?.map(item => ({
                    productoId: '', 
                    productoNombre: item.description,
                    cantidad: item.quantity,
                    costeUnitario: item.unitPrice,
                })) as any,
                gastosEnvio: result.shippingCost,
                impuestos: result.tax,
                fechaEmision: result.invoiceDate,
                fechaVencimiento: result.dueDate,
            };
            
            setExpenseToEdit(prefilledData);
            setIsPurchaseDialogOpen(true);

            toast({ title: '¡Factura Procesada!', description: 'Revisa y ajusta los datos extraídos por la IA.' });
        };
        reader.onerror = (error) => { throw new Error("Error al leer el archivo."); };
    } catch (error: any) {
        console.error('Error processing invoice:', error);
        toast({ title: 'Error al Procesar Factura', description: error.message, variant: 'destructive' });
    } finally {
        setIsProcessingInvoice(false);
        if(fileInputRef.current) fileInputRef.current.value = "";
    }
  };
  
   const confirmDeleteSelectedExpenses = async () => {
    if (!isAdmin || expensesToDelete.length === 0) return;
    setIsLoadingExpenses(true);
    try {
      await deleteExpensesBatchFS(expensesToDelete);
      toast({ title: "¡Gastos Eliminados!", description: `${expensesToDelete.length} gastos han sido eliminados.`, variant: "destructive" });
      refreshDataSignature();
      setSelectedExpenseIds([]); 
    } catch (error: any) {
      toast({ title: "Error al Eliminar", description: error.message, variant: "destructive" });
    } finally {
      setIsLoadingExpenses(false);
      setExpensesToDelete([]);
    }
  };

  const filteredExpenses = expenses
    .filter(expense =>
      (expense.proveedorNombre?.toLowerCase().includes(searchTerm.toLowerCase()) ||
       (expense.invoiceNumber && expense.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase())) ||
       (expense.categoria.toLowerCase().includes(searchTerm.toLowerCase())))
    )
    .filter(expense => docStatusFilter === "Todos" || expense.estadoDocumento === docStatusFilter)
    .filter(expense => paymentStatusFilter === "Todos" || expense.estadoPago === paymentStatusFilter);
    
  const handleSelectAllChange = (checked: boolean | 'indeterminate') => {
    if (checked === true) {
      setSelectedExpenseIds(filteredExpenses.map(p => p.id));
    } else {
      setSelectedExpenseIds([]);
    }
  };

  const handleRowSelectChange = (expenseId: string, checked: boolean) => {
    if (checked) {
      setSelectedExpenseIds(prev => [...prev, expenseId]);
    } else {
      setSelectedExpenseIds(prev => prev.filter(id => id !== expenseId));
    }
  };

  const headerCheckboxState = React.useMemo(() => {
    const filteredIds = new Set(filteredExpenses.map(p => p.id));
    const selectedFilteredIds = selectedExpenseIds.filter(id => filteredIds.has(id));

    if (selectedFilteredIds.length === 0 || filteredExpenses.length === 0) return false;
    if (selectedFilteredIds.length === filteredExpenses.length) return true;
    return 'indeterminate' as const;
  }, [selectedExpenseIds, filteredExpenses]);


  if (!isAdmin) {
    return (
      <Card className="shadow-subtle">
        <CardHeader><CardTitle className="flex items-center">Acceso Denegado</CardTitle></CardHeader>
        <CardContent><p>No tienes permiso para acceder a esta sección.</p></CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-8">
      <header className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div className="flex items-center space-x-2">
            <Receipt className="h-8 w-8 text-primary" />
            <h1 className="text-3xl font-headline font-semibold">Gestión de Gastos y Compras</h1>
        </div>
        <div className="flex items-center gap-2 flex-wrap justify-end">
            <input type="file" ref={fileInputRef} onChange={handleFileChange} className="hidden" accept="image/*,application/pdf" />
             <Button onClick={() => fileInputRef.current?.click()} disabled={isLoading || isProcessingInvoice || isAiDisabled} variant="secondary" title={isAiDisabled ? "Función desactivada temporalmente" : "Subir factura para procesar con IA"}>
                {isProcessingInvoice ? <Loader2 className="mr-2 h-4 w-4 animate-spin"/> : (isAiDisabled ? <PowerOff className="mr-2 h-4 w-4" /> : <Sparkles className="mr-2 h-4 w-4" />)}
                Subir Factura (IA)
            </Button>
          <Button onClick={handleAddNewExpenseManually} disabled={isLoading || isProcessingInvoice}>
            <PlusCircle className="mr-2 h-4 w-4" /> Registrar Gasto Manual
          </Button>
        </div>
      </header>

      <Card className="shadow-subtle hover:shadow-md transition-shadow duration-300">
        <CardHeader>
          <CardTitle>Listado de Gastos Registrados</CardTitle>
          <CardDescription>Administra las compras, gastos generales, proformas y proyecciones.</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col sm:flex-row items-center gap-4 mb-6">
            <Input
              placeholder="Buscar por proveedor o N.º Factura..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="max-w-sm"
            />
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-full sm:w-auto">
                  <Filter className="mr-2 h-4 w-4" />
                  Estado Doc: {docStatusFilter} <ChevronDown className="ml-2 h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                 <DropdownMenuCheckboxItem onSelect={() => setDocStatusFilter("Todos")} checked={docStatusFilter === "Todos"}>Todos</DropdownMenuCheckboxItem>
                {documentStatusList.map(status => (
                   <DropdownMenuCheckboxItem key={status} onSelect={() => setDocStatusFilter(status)} checked={docStatusFilter === status}>
                    {status}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
             <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-full sm:w-auto">
                  <Filter className="mr-2 h-4 w-4" />
                  Estado Pago: {paymentStatusFilter} <ChevronDown className="ml-2 h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                 <DropdownMenuCheckboxItem onSelect={() => setPaymentStatusFilter("Todos")} checked={paymentStatusFilter === "Todos"}>Todos</DropdownMenuCheckboxItem>
                {paymentStatusList.map(status => (
                   <DropdownMenuCheckboxItem key={status} onSelect={() => setPaymentStatusFilter(status)} checked={paymentStatusFilter === status}>
                    {status}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
            {selectedExpenseIds.length > 0 && (
                <Button
                    variant="destructive"
                    onClick={handleDeleteSelected}
                    className="ml-auto"
                >
                    <Trash2 className="mr-2 h-4 w-4" />
                    Eliminar ({selectedExpenseIds.length})
                </Button>
            )}
          </div>
          {isLoading ? (
             <div className="flex justify-center items-center h-64">
              <Loader2 className="h-12 w-12 animate-spin text-primary" />
              <p className="ml-4 text-muted-foreground">Cargando gastos...</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                     <TableHead className="w-[40px]">
                        <Checkbox
                            checked={headerCheckboxState}
                            onCheckedChange={handleSelectAllChange}
                            aria-label="Seleccionar todas"
                        />
                    </TableHead>
                    <TableHead>Factura / Concepto</TableHead>
                    <TableHead>Proveedor</TableHead>
                    <TableHead>Categoría</TableHead>
                    <TableHead className="text-right">Importe</TableHead>
                    <TableHead>Estado Doc.</TableHead>
                    <TableHead>Estado Pago</TableHead>
                    <TableHead className="text-right">Acciones</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredExpenses.length > 0 ? filteredExpenses.map((expense) => (
                    <TableRow key={expense.id} data-state={selectedExpenseIds.includes(expense.id) ? "selected" : ""}>
                       <TableCell>
                            <Checkbox
                                checked={selectedExpenseIds.includes(expense.id)}
                                onCheckedChange={(checked) => handleRowSelectChange(expense.id, !!checked)}
                                aria-label={`Seleccionar gasto ${expense.id}`}
                            />
                        </TableCell>
                      <TableCell className="font-medium">{expense.invoiceNumber || expense.concepto}</TableCell>
                      <TableCell>{expense.proveedorNombre || "N/A"}</TableCell>
                      <TableCell>{categoriesMap.get(expense.categoriaId) || 'Sin Categoría'}</TableCell>
                      <TableCell className="text-right">
                        <FormattedNumericValue value={expense.monto} options={{ style: 'currency', currency: 'EUR' }} />
                      </TableCell>
                      <TableCell><StatusBadge type="document" status={expense.estadoDocumento} /></TableCell>
                      <TableCell><StatusBadge type="payment" status={expense.estadoPago} /></TableCell>
                      <TableCell className="text-right">
                         <Button variant="outline" size="sm" onClick={() => handleEditExpense(expense)}>
                            <Edit className="mr-2 h-4 w-4" /> Ver/Editar
                         </Button>
                      </TableCell>
                    </TableRow>
                  )) : (
                    <TableRow>
                      <TableCell colSpan={8} className="text-center h-24">
                        No se encontraron gastos que coincidan con tu búsqueda.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
        {!isLoading && filteredExpenses.length > 0 && (
            <CardFooter>
                <p className="text-xs text-muted-foreground">Total de gastos mostrados: {filteredExpenses.length} de {expenses.length}</p>
            </CardFooter>
        )}
      </Card>
      
      <AlertDialog open={expensesToDelete.length > 0} onOpenChange={(open) => !open && setExpensesToDelete([])}>
        <AlertDialogContent>
            <AlertDialogHeader>
            <AlertDialogTitle>¿Eliminar {expensesToDelete.length} gastos?</AlertDialogTitle>
            <AlertDialogDescription>
                Esta acción no se puede deshacer y eliminará permanentemente los gastos seleccionados.
            </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setExpensesToDelete([])}>Cancelar</AlertDialogCancel>
            <AlertDialogAction onClick={confirmDeleteSelectedExpenses} variant="destructive">Sí, eliminar</AlertDialogAction>
            </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      <PurchaseDialog
          isOpen={isPurchaseDialogOpen}
          onOpenChange={setIsPurchaseDialogOpen}
          expense={expenseToEdit}
      />
    </div>
  );
}
